{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#validador-de-schema-de-arquivos-para-ingestao-de-dados","title":"Validador de schema de arquivos para ingest\u00e3o de dados","text":""},{"location":"#principais-funcoes","title":"Principais fun\u00e7\u00f5es:","text":""},{"location":"#src.frontend.ExcelValidatorUI","title":"<code>ExcelValidatorUI</code>","text":"<p>Classe respons\u00e1vel por gerar a interface de usu\u00e1rio para o validador de arquivos Excel.</p> Source code in <code>src\\frontend.py</code> <pre><code>class ExcelValidatorUI:\n    \"\"\"\n    Classe respons\u00e1vel por gerar a interface de usu\u00e1rio para o validador de arquivos Excel.\n    \"\"\"\n    def __init__(self):\n        self.set_page_config()\n\n    def set_page_config(self):\n        st.set_page_config(page_title=\"Validador de Schema de Excel\", layout=\"wide\")\n\n    def display_header(self):\n        st.title(\"Validador de Schema de Excel\")\n\n    def select_model(self):\n        model_options = [\"Usuario\", \"Vendas\", \"Recursos Humanos\"]\n        return st.selectbox(\"Selecione o modelo de dados\", model_options)\n\n    def upload_file(self):\n        return st.file_uploader(\"Carregue seu arquivo Excel aqui\", type=[\"xlsx\"])\n\n    def display_results(self, result, error):\n        if error:\n            st.error(f\"Erro na valida\u00e7\u00e3o: {error}\")\n        else:\n            st.success(\"O schema do arquivo Excel est\u00e1 correto!\")\n</code></pre>"},{"location":"#src.backend.process_excel","title":"<code>process_excel(uploaded_file)</code>","text":"<p>Processa um arquivo Excel, validando-o contra um esquema espec\u00edfico. Args:     uploaded_file: Um arquivo Excel carregado pelo usu\u00e1rio. Returns:     Uma tupla (resultado, erro), onde 'resultado' \u00e9 um booleano indicando se a valida\u00e7\u00e3o     foi bem-sucedida e 'erro' \u00e9 uma mensagem de erro se a valida\u00e7\u00e3o falhar.</p> Source code in <code>src\\backend.py</code> <pre><code>def process_excel(uploaded_file):\n    \"\"\"\n    Processa um arquivo Excel, validando-o contra um esquema espec\u00edfico.\n    Args:\n        uploaded_file: Um arquivo Excel carregado pelo usu\u00e1rio.\n    Returns:\n        Uma tupla (resultado, erro), onde 'resultado' \u00e9 um booleano indicando se a valida\u00e7\u00e3o\n        foi bem-sucedida e 'erro' \u00e9 uma mensagem de erro se a valida\u00e7\u00e3o falhar.\n    \"\"\" \n    try:\n        df = pd.read_excel(uploaded_file)\n\n        # Verificar se h\u00e1 colunas extras no DataFrame\n        extra_cols = set(df.columns) - set(Vendas.model_fields.keys())\n        if extra_cols:\n            return False, f\"Colunas extras detectadas no Excel: {', '.join(extra_cols)}\"\n\n        # Validar cada linha com o schema escolhido\n        for index, row in df.iterrows():\n            try:\n                _ = Vendas(**row.to_dict())\n            except Exception as e:\n                raise ValueError(f\"Erro na linha {index + 2}: {e}\")\n\n        return True, None\n\n    except ValueError as ve:\n        return False, str(ve)\n    except Exception as e:\n        return False, f\"Erro inesperado: {str(e)}\"\n</code></pre>"},{"location":"#src.contrato.Vendas","title":"<code>Vendas</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Modelo de dados para as vendas.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>email do comprador</p> required <code>data</code> <code>datetime</code> <p>data da compra</p> required <code>valor</code> <code>int</code> <p>valor da compra</p> required <code>produto</code> <code>str</code> <p>nome do produto</p> required <code>quantidade</code> <code>int</code> <p>quantidade de produtos</p> required <code>categoria</code> <code>str</code> <p>categoria do produto</p> required Source code in <code>src\\contrato.py</code> <pre><code>class Vendas(BaseModel):\n    \"\"\"\n    Modelo de dados para as vendas.\n\n    Args:\n        email (str): email do comprador\n        data (datetime): data da compra\n        valor (int): valor da compra\n        produto (str): nome do produto\n        quantidade (int): quantidade de produtos\n        categoria (str): categoria do produto\n\n    \"\"\"\n    email: EmailStr\n    data: datetime\n    valor: PositiveFloat\n    produto: str\n    quantidade: PositiveInt\n    categoria: CategoriaEnum\n\n    @field_validator('categoria')\n    def categoria_deve_estar_no_enum(cls, error):\n        return error\n</code></pre>"}]}